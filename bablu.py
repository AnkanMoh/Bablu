# -*- coding: utf-8 -*-
"""Bablu.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11fuYvRSObnY1wxvmV9UubvPvaOc-pXxe
"""

import streamlit as st
import pandas as pd
import os
from dotenv import load_dotenv
from groq import Groq

# Load environment variables
load_dotenv()

# Groq API Client Initialization
client = Groq(
    api_key=os.environ.get("GROQ_API_KEY", "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")
)

# Path to the logo
logo_path = "/Users/Ankan/mama.png"

# Streamlit App Design
# Header with Enhanced Styling
st.markdown(
    f"""
    <div class="header">
        <h1 class="header-title">Bablu - Cut & Style Salon Assistant</h1>
        <p class="header-tagline">Your friendly assistant for salon sales analysis</p>
    </div>
    <style>
        .header {{
            background-color: black;
            padding: 30px;
            border-radius: 12px;
            box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);
        }}
        .header-logo img {{
            max-width: 180px;
            margin-bottom: 15px;
        }}
        .header-title {{
            color: #f57c00;
            font-size: 32px;
            font-weight: bold;
            margin: 0;
        }}
        .header-tagline {{
            color: #f2f2f2;
            font-size: 16px;
            margin-top: 8px;
        }}
    </style>
    """,
    unsafe_allow_html=True,
)

# Welcome Message with Enhanced Styling
st.markdown(
    f"""
    <div style="text-align: center; margin-top: 20px; margin-bottom: 20px; padding: 20px; background-color: #2a2a2a; border-radius: 10px; border: 1px solid #f57c00;">
        <h2 style="color: #f57c00;">Welcome, Mamuni appa!</h2>
        <p style="color: #f2f2f2; font-size: 16px; margin-top: 10px;">
            Bablu is here to assist you with all your salon sales queries. Let's make your day easier and brighter! üíá‚Äç‚ôÄÔ∏è‚ú®
        </p>
    </div>
    """,
    unsafe_allow_html=True,
)

# Footer (Optional)
st.markdown(
    """
    <div style="text-align: center; margin-top: 40px; font-size: 12px; color: #aaa;">
        <p>&copy; 2025 Cut & Style Salon. All rights reserved.</p>
    </div>
    """,
    unsafe_allow_html=True,
)

# Main Content Container
st.markdown('<div class="main-container">', unsafe_allow_html=True)

# File Upload Section
st.markdown('<div class="file-upload">', unsafe_allow_html=True)
uploaded_file = st.file_uploader("Upload your salon data in Excel format:", type=["xlsx"])
st.markdown('</div>', unsafe_allow_html=True)

# Global variable to hold the data
df = None

if uploaded_file:
    try:
        # Read the uploaded Excel file
        df = pd.read_excel(uploaded_file)
        st.success("File uploaded successfully!")
        st.write("**Uploaded Data:**")
        st.dataframe(df.style.set_properties(**{'color': '#000', 'background-color': '#f2f2f2'}))
    except Exception as e:
        st.error(f"Failed to read the uploaded file: {e}")

# Query Input Section
st.markdown('<div class="query-box">', unsafe_allow_html=True)
user_query = st.text_input("Ask Bablu a question (e.g., Who made the most sales?):")
st.markdown('</div>', unsafe_allow_html=True)

if st.button("Ask Bablu"):
    if df is not None and user_query.strip():
        # Convert the uploaded data to JSON format
        data_json = df.to_dict(orient="records")

        # Prepare the query context for the Groq API
        context = (
            f"The user, referred to as 'Mamuni appa', has provided salon sales data "
            f"in the following format: {data_json}. The user has asked: '{user_query}'. "
            "Respond briefly and professionally, addressing the user as 'Mamuni appa'."
        )

        try:
            # Send the query to Groq's chat completion API
            chat_completion = client.chat.completions.create(
                messages=[
                    {
                        "role": "user",
                        "content": context,
                    }
                ],
                model="llama-3.3-70b-versatile",
            )

            # Extract and display the result
            response = chat_completion.choices[0].message.content.strip()
            st.markdown(
                f"""
                <div class="response-box">
                    <h3>Bablu says:</h3>
                    <p>{response}, Mamuni appa.</p>
                </div>
                """,
                unsafe_allow_html=True,
            )
        except Exception as e:
            st.error(f"An error occurred while communicating with the Groq API: {e}")
    else:
        st.warning("Please upload an Excel file and enter a query!")
else:
    st.info("Bablu is waiting for your query!")

# Close the Main Content Container
st.markdown('</div>', unsafe_allow_html=True)